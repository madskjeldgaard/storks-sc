TITLE:: Storks
summary:: A convenience class for the storks midi/osc controller
categories::MIDI
related:: Classes/MIDIIn

DESCRIPTION::
A convenience class for the storks midi/osc controller

CLASSMETHODS::

METHOD:: new
Instantiate and initialize the Storks class.
By default this will if necessary initialize the midiclient and connect the device.

ARGUMENT::fourteenBit
if set to true, it will create 14 bit responders, if not it will create normal 7 bit responders. This should match the setting on the Storks device.

ARGUMENT::connectOnInit
Automatically initialize MIDI and connect to the device

ARGUMENT::registerDefaults
If set to true, this will register default actions for all responders that will post info

returns:: a Storks

INSTANCEMETHODS::

METHOD::init

ARGUMENT::fourteenBit

ARGUMENT::connectOnInit

ARGUMENT::registerDefaults

returns::this

METHOD::register

ARGUMENT::layer
The device layer / midi channel of the encoder you want to register

ARGUMENT::page
The device page of the encoder you want to register

ARGUMENT::encoder
The encoder number on the layer and page you want to register

ARGUMENT::callbackFunction

This is a function that is called every time the responder is activated. It is passed the value and midi channel as arguments.

METHOD::get
Get the corresponding responder

ARGUMENT::layer

ARGUMENT::page

ARGUMENT::encoder

METHOD::connect
Manually connect device

EXAMPLES::

code::
h = Storks.new();

(
h.register(
 layer: 0,
 page: 0,
 encoder: 0,
 callbackFunction: {|val,chan|
 "Boomshakala: %".format(val).postln;
}
)

)

// A bit more extensive example
h = Storks.new();

(
Ndef(\g1, {
	var gdur = \gdur.kr(0.01);
	var wonk = \wonk.kr(0.5);
	var trig = Impulse.kr(\density.kr(10.1) * LFNoise2.kr(wonk.linexp(0.0,1.0,1,100)).range(1.0-wonk,1.0+wonk));
	var direction = \direction.kr(0.01);
	var rise = direction;
	var fall = 1.0-direction;
	var curve = \curve.kr(0.1) * (-10);
	var env = Env.perc(rise, fall, curve: curve).kr(gate: trig, timeScale: gdur, doneAction: 0);
	var sig = SinOscFB.ar(\freq.kr(200), \fb.kr(0) * 4) * env;

	Pan2.ar(sig, \pan.kr(0));
}).mold(2).play;
)

// Control
(

h.register(0, 0, 0, {|val|
	Ndef(\g1).set(\density, val.linexp(0,18363,0.01,100.0));
});

h.register(0, 0, 1, {|val|
	Ndef(\g1).set(\pan, val.linlin(0,18363,-1.0,1.0));
});

h.register(0, 0, 2, {|val|
	Ndef(\g1).set(\freq, val.linexp(0,18363,80,1000.0));
});

h.register(0, 0, 3, {|val|
	Ndef(\g1).set(\gdur, val.linexp(0,18363,0.0001,1.0));
});

h.register(0, 0, 4, {|val|
	Ndef(\g1).set(\curve, val.linlin(0,18363,0.0001,1.0));
});

h.register(0, 0, 5, {|val|
	Ndef(\g1).set(\wonk, val.linlin(0,18363,0.0,1.0));
});

h.register(0, 0, 6, {|val|
	Ndef(\g1).set(\fb, val.linlin(0,18363,0.0,1.0));
});

h.register(0, 0, 7, {|val|
	Ndef(\g1).set(\direction, val.linlin(0,18363,0.0,1.0));
});

)
::
